name: "AsciiDoc"
scopeName: "source.asciidoc"
fileTypes: [
  "ad"
  "asc"
  "adoc"
  "asciidoc"
  "adoc.txt"
]
maxTokensPerLine: 100
patterns: [
  {
    include: "#comment"
  }
  {
    include: "#horizontal-rule"
  }
  {
    include: "#list"
  }
  {
    include: "#callout-list-item"
  }
  {
    include: "#titles"
  }
  {
    include: "#various"
  }
  {
    include: "#blocks"
  }
  {
    include: "#inlines"
  }
]
repository:
  blocks:
    patterns: [
      {
        include: "#admonition-block"
      }
      {
        include: "#quote-block"
      }
      {
        include: "#table"
      }
      {
        include: "#code-blocks"
      }
      {
        include: "#example-block"
      }
      {
        include: "#sidebar-block"
      }
      {
        include: "#literal-block"
      }
      {
        include: "#passthrough-block"
      }
    ]
  "code-blocks":
    patterns: [
      {
        include: "#source-asciidoctor"
      }
      {
        include: "#source-markdown"
      }
    ]
  inlines:
    patterns: [
      {
        include: "#strong"
      }
      {
        include: "#monospaced"
      }
      {
        include: "#emphasis"
      }
      {
        include: "#superscript"
      }
      {
        include: "#subscript"
      }
      {
        include: "#general-block-macro"
      }
      {
        include: "#anchor-macro"
      }
      {
        include: "#footnote-macro"
      }
      {
        include: "#image-macro"
      }
      {
        include: "#kbd-macro"
      }
      {
        include: "#link-macro"
      }
      {
        include: "#stem-macro"
      }
      {
        include: "#menu-macro"
      }
      {
        include: "#passthrough-macro"
      }
      {
        include: "#xref-macro"
      }
      {
        include: "#attribute-reference"
      }
      {
        include: "#characters"
      }
      {
        include: "#bibliography-anchor"
      }
    ]
  "block-callout":
    patterns: [
      {
        name: "callout.source.code.asciidoc"
        match: "(?:(?:\\/\\/|#|--|;;) ?)?(\\\\)?(<)!?(--|)(\\d+)\\3(>)(?=(?: ?\\\\?<!?\\3\\d+\\3>)*$)"
        captures:
          "2":
            name: "constant.other.symbol.asciidoc"
          "4":
            name: "constant.numeric.asciidoc"
          "5":
            name: "constant.other.symbol.asciidoc"
      }
    ]
  "callout-list-item":
    patterns: [
      {
        name: "callout.asciidoc"
        match: "^(<)(\\d+)(>)\\p{Blank}+(.*)$"
        captures:
          "1":
            name: "constant.other.symbol.asciidoc"
          "2":
            name: "constant.numeric.asciidoc"
          "3":
            name: "constant.other.symbol.asciidoc"
          "4":
            patterns: [
              {
                include: "#inlines"
              }
            ]
      }
    ]
  comment:
    patterns: [
      {
        name: "comment.block.asciidoc"
        begin: "(^/{4,}$)"
        patterns: [
          {
            include: "#inlines"
          }
        ]
        end: "\\1"
      }
      {
        name: "comment.inline.asciidoc"
        match: "^/{2}\\p{Blank}(.*)$"
      }
    ]
  "horizontal-rule":
    patterns: [
      {
        name: "constant.other.symbol.horizontal-rule.asciidoc"
        match: "^(?:'|<){3,}$|^ {0,3}([-\\*'])( *)\\1\\2\\1$"
      }
    ]
  list:
    patterns: [
      {
        match: "^\\s*(-)\\p{Blank}(\\[[\\p{Blank}\\*x]\\])(?=\\p{Blank})"
        name: "markup.todo.asciidoc"
        captures:
          "1":
            name: "markup.list.bullet.asciidoc"
          "2":
            name: "markup.todo.box.asciidoc"
      }
      {
        name: "markup.list.asciidoc"
        match: "^\\p{Blank}*(-|\\*{1,5}|\\u2022{1,5})(?=\\p{Blank})"
        captures:
          "1":
            name: "markup.list.bullet.asciidoc"
      }
      {
        name: "markup.list.asciidoc"
        match: "^\\p{Blank}*(\\.{1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))(?=\\p{Blank})"
        captures:
          "1":
            name: "markup.list.bullet.asciidoc"
      }
    ]
  titles:
    patterns: [
      {
        name: "markup.heading.asciidoc"
        begin: "^((?:=|#){1,6})([\\p{Blank}]+)(?=\\S+)"
        patterns: [
          {
            include: "$self"
          }
        ]
        end: "$"
      }
    ]
  various:
    patterns: [
      {
        begin: "^\\.([^\\s.].*)"
        captures:
          "1":
            name: "markup.heading.blocktitle.asciidoc"
        end: "$"
      }
      {
        name: "meta.definition.attribute-entry.asciidoc"
        match: "^(:)(!?\\w[\\p{Blank}\\w-]*?|\\w[\\p{Blank}\\w-]*?!?)(:)(\\p{Blank}+.*)?$"
        captures:
          "1":
            name: "punctuation.separator.attribute-entry.asciidoc"
          "2":
            name: "support.constant.attribute-name.asciidoc"
          "3":
            name: "punctuation.separator.attribute-entry.asciidoc"
          "4":
            name: "string.unquoted.attribute-value.asciidoc"
      }
      {
        name: "markup.explicit.asciidoc"
        match: "^\\[((normal|literal|listing|TIP|NOTE|IMPORTANT|WARNING|CAUTION|partintro|comment|example|sidebar|source|music|latex|graphviz))\\]$"
        captures:
          "1":
            name: "support.constant.asciidoc"
      }
      {
        name: "markup.section.asciidoc"
        match: "^\\[((sect[1-4]|abstract|preface|colophon|dedication|glossary|bibliography|synopsis|appendix|index))\\]$"
        captures:
          "1":
            name: "support.constant.asciidoc"
      }
    ]
  "anchor-macro":
    patterns: [
      {
        match: "\\\\?(?:(\\[{2})([\\p{Alpha}:_][\\p{Word}:.-]*)(?:,\\p{Blank}*(\\S.*?))?(\\]{2}))"
        captures:
          "1":
            name: "support.constant.asciidoc"
          "2":
            name: "markup.blockid.asciidoc"
          "4":
            name: "support.constant.asciidoc"
      }
      {
        match: "\\\\?(anchor:)(\\S+)(\\[)(.*?[^\\\\])?(\\])"
        captures:
          "1":
            name: "support.constant.asciidoc"
          "2":
            name: "markup.blockid.asciidoc"
          "3":
            name: "support.constant.asciidoc"
          "4":
            name: "support.constant.asciidoc"
          "5":
            name: "support.constant.asciidoc"
      }
    ]
  "attribute-reference":
    patterns: [
      {
        name: "markup.substitution.attribute-reference.asciidoc"
        match: "(\\\\)?(\\{)((set|counter2?):.+?|\\w+(?:[\\-]\\w+)*)(\\\\)?(\\})"
      }
    ]
  "bibliography-anchor":
    patterns: [
      {
        name: "bibliography-anchor.asciidoc"
        match: "\\\\?(\\[{3})([\\p{Word}:][\\p{Word}:.-]*?)(\\]{3})"
        captures:
          "1":
            name: "support.constant.asciidoc"
          "2":
            name: "markup.biblioref.asciidoc"
          "3":
            name: "support.constant.asciidoc"
      }
    ]
  characters:
    patterns: [
      {
        name: "markup.htmlentity.asciidoc"
        match: "(&)(\\S+?)(;)"
        captures:
          "1":
            name: "support.constant.asciidoc"
          "3":
            name: "support.constant.asciidoc"
      }
    ]
  emphasis:
    patterns: [
      {
        match: "(?!_{4,}\\s*$)(?<=^|[^\\w;:])(?:\\[(?:[^\\]]+?)\\])?(_\\S_|_\\S[\\s\\S]*?\\S_)(?!\\w)"
        captures:
          "0":
            name: "markup.italic.asciidoc"
      }
      {
        match: "\\\\?(?:\\[([^\\]]+?)\\])?(__(?!_)[\\s\\S]+?__)"
        captures:
          "0":
            name: "markup.italic.asciidoc"
      }
    ]
  "footnote-macro":
    patterns: [
      {
        name: "markup.link.footnote.asciidoc"
        match: "\\\\?(footnote(?:ref)?):\\[(.*?[^\\\\])\\]"
        captures:
          "2":
            name: "support.constant.footnote.inline.asciidoc"
        patterns: [
          {
            match: "\\G[^\\]]*"
            captures:
              "0":
                patterns: [
                  {
                    include: "#inlines"
                  }
                ]
          }
        ]
      }
    ]
  "general-block-macro":
    patterns: [
      {
        name: "markup.macro.block.general.asciidoc"
        match: "^(\\p{Word}+::)(\\S*?)(\\[)((?:\\\\\\]|[^\\]])*?)(\\])$"
        captures:
          "1":
            name: "support.constant.asciidoc"
          "3":
            name: "support.constant.asciidoc"
          "5":
            name: "support.constant.asciidoc"
      }
    ]
  "image-macro":
    patterns: [
      {
        name: "markup.macro.inline.image.general.asciidoc"
        match: "\\\\?(?:image|icon):([^:\\[][^\\[]*)(\\[)((?:\\\\\\]|[^\\]])*?)(\\])"
        captures:
          "1":
            name: "support.constant.asciidoc"
          "2":
            name: "support.constant.asciidoc"
          "4":
            name: "support.constant.asciidoc"
      }
    ]
  "kbd-macro":
    patterns: [
      {
        name: "markup.macro.inline.kbd.general.asciidoc"
        match: "\\\\?(?:kbd|btn):(\\[)((?:\\\\\\]|[^\\]])+?)(\\])"
        captures:
          "2":
            name: "support.constant.asciidoc"
      }
    ]
  "link-macro":
    patterns: [
      {
        name: "markup.link.inline.asciidoc"
        match: "(^|link:|<|[\\s>\\(\\)\\[\\];])(\\\\?(?:https?|file|ftp|irc)://[^\\s\\[\\]<]*[^\\s.,\\[\\]<])(?:\\[((?:\\\\\\]|[^\\]])*?)\\])?"
        captures:
          "2":
            name: "support.constant.link.inline.asciidoc"
      }
      {
        name: "markup.link.inline.asciidoc"
        match: "\\\\?(?:link|mailto):([^\\s\\[]+)(?:\\[((?:\\\\\\]|[^\\]])*?)\\])"
        captures:
          "1":
            name: "support.constant.link.inline.asciidoc"
      }
    ]
  "menu-macro":
    patterns: [
      {
        name: "markup.link.menu.inline.asciidoc"
        match: "\\\\?menu:(\\p{Word}|\\p{Word}.*?\\S)\\[\\p{Blank}*(.+?)?\\]"
        captures:
          "1":
            name: "support.constant.menu.inline.asciidoc"
      }
    ]
  monospaced:
    patterns: [
      {
        name: "markup.raw.constrained.monospaced.asciidoc"
        match: "(^|[^\\p{Word};:\"'`}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S.*?\\S)`(?![\\p{Word}\"'`])"
      }
      {
        name: "markup.raw.unconstrained.monospaced.asciidoc"
        match: "\\\\?(?:\\[([^\\]]+?)\\])?``(.+?)``"
      }
    ]
  "passthrough-macro":
    patterns: [
      {
        name: "markup.macro.inline.passthrough.asciidoc"
        match: "^(pass:)([a-z,]*)\\[(.*)\\]$"
        captures:
          "1":
            name: "support.constant.passthrough.inline.asciidoc"
          "3":
            patterns: [
              {
                include: "text.html.basic"
              }
            ]
      }
      {
        name: "markup.macro.inline.passthrough.asciidoc"
        match: "(?:(?:(\\\\?)\\[([^\\]]+?)\\])?(\\\\{0,2})(\\+{2,3}|\\${2})(.*?)(\\4)|(\\\\?)(pass:)([a-z,]*)\\[(.*?[^\\\\])\\])"
        captures:
          "4":
            name: "support.constant.passthrough.inline.asciidoc"
          "5":
            patterns: [
              {
                include: "text.html.basic"
              }
            ]
          "6":
            name: "support.constant.passthrough.inline.asciidoc"
          "8":
            name: "support.constant.passthrough.inline.asciidoc"
          "10":
            patterns: [
              {
                include: "text.html.basic"
              }
            ]
      }
    ]
  "stem-macro":
    patterns: [
      {
        name: "markup.macro.inline.stem.general.asciidoc"
        match: "\\\\?(stem|(?:latex|ascii)math):([a-z,]*)(\\[)(.*?[^\\\\])(\\])"
        captures:
          "2":
            name: "support.constant.asciidoc"
          "4":
            name: "support.constant.asciidoc"
      }
    ]
  strong:
    patterns: [
      {
        name: "markup.bold.unconstrained.asciidoc"
        match: "\\\\?(?:\\[([^\\]]+?)])?(\\*\\*)(.+?)(\\*\\*)"
        captures:
          "2":
            name: "support.constant.asciidoc"
          "4":
            name: "support.constant.asciidoc"
      }
      {
        name: "markup.bold.constrained.asciidoc"
        match: "(?<=^|[^\\p{Word};:}])(?:\\[([^\\]]+?)\\])?(\\*)(\\S|\\S.*?\\S)(\\*)(?!\\p{Word})"
        captures:
          "2":
            name: "support.constant.asciidoc"
          "4":
            name: "support.constant.asciidoc"
      }
    ]
  subscript:
    patterns: [
      {
        name: "markup.sub.asciidoc"
        match: "\\\\?(?:\\[([^\\]]+?)\\])?(~)(\\S+?)(~)"
        captures:
          "2":
            name: "constant.sub.asciidoc"
          "4":
            name: "constant.sub.asciidoc"
      }
    ]
  superscript:
    patterns: [
      {
        name: "markup.super.asciidoc"
        match: "\\\\?(?:\\[([^\\]]+?)\\])?(\\^)(\\S+?)(\\^)"
        captures:
          "2":
            name: "constant.super.asciidoc"
          "4":
            name: "constant.super.asciidoc"
      }
    ]
  "xref-macro":
    patterns: [
      {
        name: "markup.reference.xref.asciidoc"
        match: "\\\\?(?:(<<)([\\p{Word}\":./].*?)(>>))"
        captures:
          "1":
            name: "constant.asciidoc"
          "3":
            name: "constant.asciidoc"
      }
      {
        name: "markup.reference.xref.asciidoc"
        match: "\\\\?((xref:)([\\p{Word}\":.\\/].*?)(\\[(.*?)\\]))"
        captures:
          "2":
            name: "constant.asciidoc"
          "3":
            name: "constant.id.xref.asciidoc"
      }
    ]
  "admonition-block":
    patterns: [
      {
        name: "markup.admonition.asciidoc"
        begin: "^((NOTE|TIP|IMPORTANT|WARNING|CAUTION)\\:)\\p{Blank}+"
        captures:
          "1":
            name: "support.constant.asciidoc"
        patterns: [
          {
            include: "#inlines"
          }
        ]
        end: "$"
      }
    ]
  "example-block":
    patterns: [
      {
        name: "markup.block.example.asciidoc"
        begin: "^(={4,})$"
        patterns: [
          {
            include: "#inlines"
          }
        ]
        end: "\\1"
      }
    ]
  "literal-block":
    patterns: [
      {
        name: "markup.block.literal.asciidoc"
        begin: "(^\\.{4,}$)"
        end: "\\1"
      }
    ]
  "passthrough-block":
    patterns: [
      {
        name: "markup.block.passthrough.asciidoc"
        begin: "(^\\+{4,}$)"
        patterns: [
          {
            include: "text.html.basic"
          }
        ]
        end: "\\1"
      }
    ]
  "quote-block":
    patterns: [
      {
        name: "markup.italic.quotes.attributes.asciidoc"
        begin: "^\\[(quote|verse)(, ([\\w ]+))?(, ([\\w ]+))?"
        beginCaptures:
          "1":
            name: "none.quotes.label.asciidoc"
          "3":
            name: "none.quotes.attribution.asciidoc"
          "5":
            name: "none.quotes.citetitle.asciidoc"
        end: "\\]$"
      }
      {
        name: "markup.italic.quotes.asciidoc"
        begin: "(^_{4,}$)"
        patterns: [
          {
            include: "#inlines"
          }
        ]
        end: "\\1"
      }
    ]
  "sidebar-block":
    patterns: [
      {
        name: "markup.block.sidebar.asciidoc"
        begin: "(^\\*{4,}$)"
        patterns: [
          {
            include: "#inlines"
          }
        ]
        end: "\\1"
      }
    ]
  table:
    patterns: [
      {
        begin: "^(\\|={3,}\\s*)$"
        beginCaptures:
          "0":
            name: "support.table.asciidoc"
        patterns: [
          {
            match: "(^|\\s+)([^\\|\\s\\\\]*)(\\|)(?!={3,}|\\|)"
            captures:
              "2":
                name: "support.table.spec.asciidoc"
              "3":
                name: "support.table.asciidoc"
          }
          {
            include: "#inlines"
          }
        ]
        end: "^\\1$"
        endCaptures:
          "0":
            name: "support.table.asciidoc"
      }
    ]
  "source-asciidoctor":
    patterns: [
      {
        begin: "^\\[source,\\s*(?i:(c))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.c.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.c"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.c"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(clojure))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.clojure.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.clojure"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.clojure"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(coffee-?(script)?))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.coffee.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.coffee"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.coffee"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(c(pp|\\+\\+)))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.cpp.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.cpp"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.cpp"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(css))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.css.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.css"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.css"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(cs(harp)?))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.cs.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.cs"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.cs"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(diff|patch|rej))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.diff.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.diff"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.diff"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(docker(file)?))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.dockerfile.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.dockerfile"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.dockerfile"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(elixir))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.elixir.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.elixir"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.elixir"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(elm))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.elm.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.elm"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.elm"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(erlang))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.erlang.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.erlang"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.erlang"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(go(lang)?))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.go.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.go"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.go"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(haskell))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.haskell.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.haskell"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.haskell"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(html))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.html.basic.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "text.embedded.html.basic"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "text.html.basic"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(java))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.java.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.java"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.java"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(javascript|js))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.js.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.js"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.js"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(json))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.json.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.json"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.json"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(julia))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.julia.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.julia"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.julia"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(less))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.css.less.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.css.less"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.css.less"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(make(file)?))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.makefile.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.makefile"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.makefile"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(markdown|mdown|md))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.gfm.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.gfm"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.gfm"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(objc|objective-c))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.objc.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.objc"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.objc"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(perl))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.perl.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.perl"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.perl"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(perl6))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.perl6.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.perl6"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.perl6"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(php))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.html.php.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "text.embedded.html.php"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "text.html.php"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(properties))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.asciidoc.properties.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.asciidoc.properties"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.asciidoc.properties"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(py(thon)?))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.python.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.python"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.python"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(r))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.r.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.r"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.r"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(ruby|rb))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.ruby.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.ruby"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.ruby"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(rust|rs))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.rust.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.rust"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.rust"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(sass))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.sass.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.sass"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.sass"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(scss))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.css.scss.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.css.scss"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.css.scss"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(sh|bash|shell))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.shell.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.shell"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.shell"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(sql))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.sql.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.sql"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.sql"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(swift))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.swift.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.swift"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.swift"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(toml))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.toml.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.toml"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.toml"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(typescript|ts))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.ts.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.ts"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.ts"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(xml))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.xml.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "text.embedded.xml"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "text.xml"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\[source,\\s*(?i:(ya?ml))\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            name: "markup.code.yaml.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
            contentName: "source.embedded.yaml"
            patterns: [
              {
                include: "#block-callout"
              }
              {
                include: "source.yaml"
              }
            ]
          }
        ]
        end: "(?<=----)[\\r\\n]+$"
      }
      {
        begin: "^\\s*\\[source(,[^\\],]*)?\\]$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "(?<=----)[\\r\\n]+$"
        patterns: [
          {
            name: "markup.raw.asciidoc"
            begin: "^(-{4,})\\s*$"
            beginCaptures:
              "0":
                name: "support.asciidoc"
            patterns: [
              {
                include: "#block-callout"
              }
            ]
            end: "^\\1*$"
            endCaptures:
              "0":
                name: "support.asciidoc"
          }
        ]
      }
    ]
  "source-markdown":
    patterns: [
      {
        name: "markup.code.c.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(c))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.c"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.c"
          }
        ]
      }
      {
        name: "markup.code.clojure.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(clojure))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.clojure"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.clojure"
          }
        ]
      }
      {
        name: "markup.code.coffee.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(coffee-?(script)?))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.coffee"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.coffee"
          }
        ]
      }
      {
        name: "markup.code.cpp.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(c(pp|\\+\\+)))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.cpp"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.cpp"
          }
        ]
      }
      {
        name: "markup.code.css.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(css))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.css"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.css"
          }
        ]
      }
      {
        name: "markup.code.cs.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(cs(harp)?))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.cs"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.cs"
          }
        ]
      }
      {
        name: "markup.code.diff.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(diff|patch|rej))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.diff"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.diff"
          }
        ]
      }
      {
        name: "markup.code.dockerfile.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(docker(file)?))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.dockerfile"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.dockerfile"
          }
        ]
      }
      {
        name: "markup.code.elixir.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(elixir))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.elixir"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.elixir"
          }
        ]
      }
      {
        name: "markup.code.elm.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(elm))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.elm"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.elm"
          }
        ]
      }
      {
        name: "markup.code.erlang.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(erlang))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.erlang"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.erlang"
          }
        ]
      }
      {
        name: "markup.code.go.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(go(lang)?))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.go"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.go"
          }
        ]
      }
      {
        name: "markup.code.haskell.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(haskell))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.haskell"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.haskell"
          }
        ]
      }
      {
        name: "markup.code.html.basic.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(html))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "text.embedded.html.basic"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "text.html.basic"
          }
        ]
      }
      {
        name: "markup.code.java.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(java))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.java"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.java"
          }
        ]
      }
      {
        name: "markup.code.js.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(javascript|js))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.js"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.js"
          }
        ]
      }
      {
        name: "markup.code.json.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(json))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.json"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.json"
          }
        ]
      }
      {
        name: "markup.code.julia.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(julia))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.julia"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.julia"
          }
        ]
      }
      {
        name: "markup.code.css.less.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(less))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.css.less"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.css.less"
          }
        ]
      }
      {
        name: "markup.code.makefile.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(make(file)?))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.makefile"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.makefile"
          }
        ]
      }
      {
        name: "markup.code.gfm.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(markdown|mdown|md))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.gfm"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.gfm"
          }
        ]
      }
      {
        name: "markup.code.objc.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(objc|objective-c))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.objc"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.objc"
          }
        ]
      }
      {
        name: "markup.code.perl.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(perl))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.perl"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.perl"
          }
        ]
      }
      {
        name: "markup.code.perl6.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(perl6))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.perl6"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.perl6"
          }
        ]
      }
      {
        name: "markup.code.html.php.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(php))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "text.embedded.html.php"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "text.html.php"
          }
        ]
      }
      {
        name: "markup.code.asciidoc.properties.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(properties))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.asciidoc.properties"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.asciidoc.properties"
          }
        ]
      }
      {
        name: "markup.code.python.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(py(thon)?))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.python"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.python"
          }
        ]
      }
      {
        name: "markup.code.r.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(r))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.r"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.r"
          }
        ]
      }
      {
        name: "markup.code.ruby.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(ruby|rb))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.ruby"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.ruby"
          }
        ]
      }
      {
        name: "markup.code.rust.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(rust|rs))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.rust"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.rust"
          }
        ]
      }
      {
        name: "markup.code.sass.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(sass))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.sass"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.sass"
          }
        ]
      }
      {
        name: "markup.code.css.scss.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(scss))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.css.scss"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.css.scss"
          }
        ]
      }
      {
        name: "markup.code.shell.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(sh|bash|shell))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.shell"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.shell"
          }
        ]
      }
      {
        name: "markup.code.sql.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(sql))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.sql"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.sql"
          }
        ]
      }
      {
        name: "markup.code.swift.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(swift))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.swift"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.swift"
          }
        ]
      }
      {
        name: "markup.code.toml.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(toml))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.toml"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.toml"
          }
        ]
      }
      {
        name: "markup.code.ts.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(typescript|ts))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.ts"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.ts"
          }
        ]
      }
      {
        name: "markup.code.xml.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(xml))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "text.embedded.xml"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "text.xml"
          }
        ]
      }
      {
        name: "markup.code.yaml.asciidoc"
        begin: "^\\s*(`{3,})\\s*(?i:(ya?ml))\\s*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
        contentName: "source.embedded.yaml"
        patterns: [
          {
            include: "#block-callout"
          }
          {
            include: "source.yaml"
          }
        ]
      }
      {
        name: "markup.raw.asciidoc"
        begin: "^\\s*(`{3,}).*$"
        beginCaptures:
          "0":
            name: "support.asciidoc"
        patterns: [
          {
            include: "#block-callout"
          }
        ]
        end: "^\\s*\\1\\s*$"
        endCaptures:
          "0":
            name: "support.asciidoc"
      }
    ]
